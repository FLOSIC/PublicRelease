C UTEP Electronic Structure Lab (2019)
C
       SUBROUTINE SICLAG_DER(LSPN,LFM)
!
!  KAJ 1-8-2018 This computes <del(phi_i)/del(R_nu)|VSIC_i|phi_i>
!        for each atomic site, nu; compute for the orbital LFM
!
       use mesh1,only : wmsh,rmsh,nmsh
       use common2,only : RIDT,N_CON,LSYMMAX,N_POS,NFNCT,NSPN
       use common5,only : NWF,NWFS,PSI
       use mixpot1,only : POTIN,POT=>POTOUT
       use pot_dens,only : COULOMB,RHOG
       use for_diag1
!SIC modules
       use SICMAT,only : SIC,DERSIC
       use FRM,only    : BFRM,RESULTS,LFRM,DEBDAX
       use MOCORB,only : SLAT,NFRM,ZTZL,JJJJJJ
! Converion to implicit none.  Raja Zope Sun Aug 20 09:01:50 MDT 2017

!      INCLUDE  'PARAMAS'  
       INCLUDE  'PARAMA2'  
       INTEGER :: LSPN, LFM, I, IID,IFRM, IPTS, ISIZE, ISPN, ITASKB,
     & ITASKE, J, JWF, LPTS, MPTS, NGRAD, NMAX, NTID, I_POS, ICON,IX,
     & IERR, IFNCT, IGR, ILOC, ISHDUM, ISHELLA, IWF, J_POS, JFM, JFN,
     & JPTS, KPTS, L_NUC, LFN, LI, LMAX1, LPV, M_NUC, MU, NDERV, NPV
       REAL*8 :: SYMBOL , APT1, APT2, CHGDN, CHGE, CHGUP, FMAT,
     & RHI, RPTS, SICP, SMCHG, TMKIN, WMSA, ADD1, ADD2, 
     & ADD3,ADD4, AGRAD, FACTOR,over_test,testsic
       PARAMETER (NMAX=MPBLOCK)

       LOGICAL EXIST,FIRST,IUPDAT

       DIMENSION WMSA(NMAX),RPTS(3,NMAX)
       DIMENSION SICP(NMAX)
C
       DIMENSION ISIZE(3)
       DATA ISIZE/1,3,6/
       DATA FIRST/.TRUE./
       INTEGER MFRM

       SAVE
c
c  Print tests as needed...
c
c       print *, 'in SICLAG_DER:  LSPN LFM', LSPN, LFM
c
       NGRAD=4
c
c  initialize test integrals
c
       over_test = 0.0d0
       testsic = 0.0d0
C
C LOOP OVER ALL POINTS
C
       CALL GTTIME(APT1)
       LPTS=0
 10    CONTINUE
       IF(LPTS+NMAX.LT.NMSH)THEN
         MPTS=NMAX
       ELSE
         MPTS=NMSH-LPTS
       END IF
       DO IPTS=1,MPTS
         WMSA(IPTS)=WMSH(LPTS+IPTS)
         SICP(IPTS)=POT(LPTS+IPTS)
         DO J=1,3
           RPTS(J,IPTS)=RMSH(J,LPTS+IPTS)
         END DO
       END DO
c
c  KAI-  The following can be parallelized; PAMLM_DERSIC is not
c        written.  It would follow the same format as in frcslv
c
c  %ifndef MPI
c
       CALL SICLM_DERSLV(LSPN,LFM,MPTS,WMSA,SICP,RPTS,
     &   over_test,testsic)
C  %else
c      CALL PAMLM_DERSIC(1,LSPN,LFM,MPTS,WMSA,SICP,RPTS)
C  %endif

       LPTS=LPTS+MPTS
       IF (LPTS .LT. NMSH) GOTO 10
c
C  %ifdef MPI
C         CALL CKWORKER(3,NTID)
C         CALL GTTIME(APT2)
C         PRINT*,'TIME FOR DERSIC:',LFM,APT2-APT1
C         CALL PAMLMSIC(2,LSPN,LFM,MPTS,WMSA,SICP,RPTS)
C  %endif
c
       LFN = LFM + LFRM(1)*(LSPN-1)
c
c      print test integrals as needed...
c
c      PRINT*, 'LFM OVER_TEST', LFN, over_test
c      PRINT*, 'LFM TESTSIC', LFN, testsic
c      PRINT*,'DERSIC MATRIX FOR ORBITAL LFM:',LFN
c      do iid = 1,10
c      PRINT 1000,(DERSIC(IX,LFM,IID),IX=1,3)
c      end do
1000   FORMAT(' ',3F12.5)
       RETURN
       END

!####################################################################

       SUBROUTINE SICLM_DERSLV(LSPN,LFM,MPTS,WMSA,SICP,RPTS,
     & over_test,testsic)
c      use mesh1,only : wmsh,rmsh,nmsh
       use common2,only : RIDT,N_CON,LSYMMAX,N_POS,NFNCT,NSPN
       use common3,only : RMAT, NGRP
       use common5,only : N_OCC,NWF,NWFS,PSI
       use common8,only : REP, N_REP, NDMREP
c      use mixpot1,only : POTIN,POT=>POTOUT
       use pot_dens,only : COULOMB,RHOG
       use for_diag1
!SIC modules
       use SICMAT,only : SIC,DERSIC
       use FRM,only    : BFRM,RESULTS,LFRM,DEBDAX
       use mpidat1,only : IRANK
! Converion to implicit none.  Raja Zope Sun Aug 20 09:01:50 MDT 2017

!      INCLUDE  'PARAMAS'  
       INCLUDE  'PARAMA2'  
       INTEGER :: LSPN, LFM, I, IFRM, IPT, ISIZE, ISPN, ITASKB,
     & ITASKE, J, JWF, LPTS, MPTS, NGRAD, NMAX, NTID, I_POS, ICON,
     & IERR, IFNCT, IGR, ILOC, ISHDUM, IID, IWF, J_POS, JFM, JFN,
     & MDUM,MDX,IGRP,IOCC,IROW,JROW,JWF_BEG,K_REP,KPTS,ix,LFN,LI,
     & LMAX1,LPV,m_nuc,mu,nderv,npv,jpts,l_nuc,jbeg,jend
       INTEGER :: ISPFAC
       REAL*8 :: SYMBOL , APT1, APT2, CHGDN, CHGE, CHGUP, FMAT,
     & RHI, RPTS, SICP, SMCHG, TMKIN, WMSA, ADD1, ADD2, ADD3,
     & ADD4, AGRAD, FACTOR, RR, X, Y, Z, TESTSIC,over_test
       PARAMETER (NMAX=MPBLOCK)
       LOGICAL EXIST,FIRST,IUPDAT
       DIMENSION WMSA(NMAX),RPTS(3,NMAX)
       DIMENSION SICP(NMAX)
       DIMENSION FMAT(MAX_OCC,MAX_OCC,4,2),RHI(4)

      REAL*8,allocatable :: PSIG(:,:), PTS(:,:), PSID(:,:,:) 
     &    ,GRAD(:,:,:,:,:),GRAD1(:,:,:,:),RVECA(:,:),GSUB(:,:) 
      LOGICAL ,allocatable :: ICOUNT(:,:) 
C
       DIMENSION RR(3),JBEG(3),JEND(3)
       DIMENSION ISIZE(3)
       DATA ISIZE/1,3,6/
       DATA FIRST/.TRUE./
       DATA JBEG,JEND/1,2,5,1,4,10/

       INTEGER MXXD,KXXS,KXXO


       SAVE  !YY to save or not save?

c       print *, 'in siclm_der_slv', LFM, LSPN
c       call flush(6)
!YY allocate tmp2 arrays
       ALLOCATE(PSIG(NMAX,10),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR ALLOCATING PSIG'
       ALLOCATE(PSID(3,MAX_OCC,NMAX),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR ALLOCATING PSID'
       ALLOCATE(PTS(NSPEED,3),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR ALLOCATING PTS'
       ALLOCATE(GRAD(NSPEED,10,6,MAX_CON,3),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR ALLOCATING GRAD'
       ALLOCATE(GRAD1(3,MAX_CON,10,3),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR ALLOCATING GRAD1'
       ALLOCATE(GSUB(3,MAX_OCC),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR ALLOCATING GSUB'
       ALLOCATE(RVECA(3,MX_GRP),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR ALLOCATING RVECA'
       ALLOCATE(ICOUNT(MAX_CON,3),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR ALLOCATING ICOUNT'

       IF(LFM.EQ.0)THEN
         PRINT*,IRANK, LFM,' FIRST LFM IS ZERO'
         CALL STOPIT
       END IF
       ISPFAC = 2/NSPN
       NGRAD=4
       FORALL (IPT=1:MPTS,IGR=1:NGRAD)
         PSIG(IPT,IGR) = 0.0D0
       END FORALL
c
c      Get correct index for local orbital wave function
c
       LFN = LFM + (LSPN-1)*LFRM(1)
       IID=0
       DO 86 IFNCT=1,NFNCT
         LMAX1=LSYMMAX(IFNCT)+1
C
C FOR ALL POSITIONS OF THIS CENTER
C
         DO 84 I_POS=1,N_POS(IFNCT)
          IID=IID+1
C
C GET SYMMETRY INFO
c
c       call flush(6)
C
          CALL OBINFO(1,RIDT(1,IID),RVECA,M_NUC,ISHDUM)
          IF(NWF.GT.MAX_OCC)THEN
           PRINT *,'APTSLV: MAX_OCC MUST BE AT LEAST:',NWF
           CALL STOPIT
          END IF
C
C UNRAVEL 2 gives coefficients of local orbitals in fixed basis
C
          MXXD=1        !Get coefs for occupied orbitals only
          KXXS=LSPN     !
          KXXO=0        !This should not be needed
          DO 82 J_POS=1,M_NUC
           CALL UNRAVEL2(MXXD,KXXS,KXXO,IFNCT,IID,J_POS,
     &                   RIDT(1,IID),RVECA,L_NUC,1)
           IF(L_NUC.NE.M_NUC)THEN
            PRINT *,'APTSLV: PROBLEM IN UNRAVEL'
            CALL STOPIT
           END IF
C
C FOR ALL MESHPOINTS IN BLOCK DO A SMALLER BLOCK
C
           KPTS=0
           DO 80 JPTS=1,MPTS,NSPEED
            NPV=MIN(NSPEED,MPTS-JPTS+1)
            DO LPV=1,NPV
             KPTS=KPTS+1
             PTS(LPV,1)=RPTS(1,KPTS)-RVECA(1,J_POS)
             PTS(LPV,2)=RPTS(2,KPTS)-RVECA(2,J_POS)
             PTS(LPV,3)=RPTS(3,KPTS)-RVECA(3,J_POS)
            END DO
C
C GET ORBITS AND DERIVATIVES for local orbital lfn
C
            NDERV=1
            CALL GORBDRV(NDERV,IUPDAT,ICOUNT,NPV,PTS,IFNCT,GRAD)
            IF (IUPDAT) THEN
             IPT=JPTS-1
             ILOC=0
             DO 78 LI=1,LMAX1
              DO MU=1,ISIZE(LI)
               DO ICON=1,N_CON(LI,IFNCT)
                ILOC=ILOC+1
                IF (ICOUNT(ICON,LI)) THEN
c                DO IWF=1,NWF            !only need one orbital
                  FACTOR=PSI(ILOC,LFN,1)
                  if(abs(FACTOR) .GT. 1.0d-10) then
                  DO IGR=1,NGRAD
                   DO LPV=1,NPV
                    PSIG(IPT+LPV,IGR)=PSIG(IPT+LPV,IGR)
     &              +FACTOR*GRAD(LPV,IGR,MU,ICON,LI)
                   END DO    !LPV:  fill in NSPEED points at a time
                  END DO     !IGR
                  end if
c                END DO      !IWF
                END IF
               END DO        !ICON
              END DO         !MU
   78        CONTINUE        !LI
            END IF
   80      CONTINUE          !JPTS   Loop over all NMAX points
   82     CONTINUE           !JPOS
   84    CONTINUE            !IPOS
   86   CONTINUE             !IFNCT
C
C CONSTRUCT TEST INTEGRALS:  <phi_i|phi_i>, and <phi_i|VSIC_i|phi_i>
c
          DO IPT=1,MPTS
           TESTSIC=TESTSIC + 
     &     PSIG(IPT,1)*PSIG(IPT,1)*WMSA(IPT)*SICP(IPT)
           OVER_test = over_test + psig(ipt,1)*psig(ipt,1)*wmsa(ipt)
          END DO
 1000  FORMAT(' ',5F12.5)
c
C  The following section computes dphi_i/dR = Sum_s {c^i_s * df_s/dR}
c      for each atomic coordinate
c  As each is built, it is used to compute matrix elements
c        <dphi_i/dR|VSIC_i|phi_i> 
C
C  IID is the atom index of the derivative;psid has an implicit IID index
c
      IID=0
      DO 485 IFNCT=1,NFNCT
       DO 483 I_POS=1,N_POS(IFNCT)
        IID=IID+1
        CALL OBINFO(1,RIDT(1,IID),RVECA,M_NUC,ISHDUM)
        do ipt = 1,nmax
         do iwf = 1,NWF
         do ix = 1,3
           PSID(IX,IWF,IPT) = 0.0D0
         end do
         end do
        end do
        J_POS=1
c
c  unravel2 returns coefficients for local orbitals
c
         MDX=1             !get coefs for all occupied orbitals
         MDUM=1            !dummy index when mdx = 1
         CALL UNRAVEL2(MDX,LSPN,MDUM,IFNCT,IID,J_POS,RIDT(1,IID),
     & RVECA,L_NUC,1)
        IF(L_NUC.NE.M_NUC)THEN
         write(6,*)'FRCSLV: PROBLEM IN UNRAVEL'
         CALL STOPIT
        END IF
        DO 495 IPT=1,MPTS
         DO 493 IGRP=1,NGRP
C
C ROTATE POINT WHEN SYMMETRY is used
c  ***NOTE*** point group symmetry is not implemented yet 1-28-2018 KAJ
c 
C
          DO I=1,3
           RR(I)=0.0D0
           DO J=1,3
            RR(I)=RR(I)+RMAT(I,J,IGRP)*RPTS(J,IPT)
           END DO
          END DO
          ILOC=0
C
C  INITIALIZE SITE DERIVS
C
          DO IWF=1,NWF
           DO IX=1,3
            GSUB(IX,IWF)=0.0D0
           END DO
          END DO
          X=RR(1)-RVECA(1,J_POS)
          Y=RR(2)-RVECA(2,J_POS)
          Z=RR(3)-RVECA(3,J_POS)
          CALL GTGRAD(X,Y,Z,IFNCT,GRAD1)
          DO 480 LI=1,3
           DO 478 MU=JBEG(LI),JEND(LI)
            DO 475 ICON=1,N_CON(LI,IFNCT)
             ILOC=ILOC+1
             DO 465 IWF=1,NWF
              GSUB(1,IWF)=GSUB(1,IWF)
     &                   +PSI(ILOC,IWF,1)*GRAD1(1,ICON,MU,LI)
              GSUB(2,IWF)=GSUB(2,IWF)
     &                   +PSI(ILOC,IWF,1)*GRAD1(2,ICON,MU,LI)
              GSUB(3,IWF)=GSUB(3,IWF)
     &                   +PSI(ILOC,IWF,1)*GRAD1(3,ICON,MU,LI)
  465        CONTINUE
  475       CONTINUE
  478      CONTINUE
  480     CONTINUE
C
C UPDATE PSID:  implicit iid index;  lspn in call statement
C
          IWF=0
c         DO ISPN=1,NSPN         !use spin of orbital LFN
           DO K_REP=1,N_REP
            DO IOCC=1,N_OCC(K_REP,LSPN)
             JWF_BEG=IWF
             DO IROW=1,NDMREP(K_REP)
              IWF=IWF+1
              JWF=JWF_BEG
              DO JROW=1,NDMREP(K_REP)
               JWF=JWF+1
               PSID(1,IWF,IPT)=PSID(1,IWF,IPT)
     &          +REP(JROW,IROW,IGRP,K_REP)*GSUB(1,JWF)
               PSID(2,IWF,IPT)=PSID(2,IWF,IPT)
     &          +REP(JROW,IROW,IGRP,K_REP)*GSUB(2,JWF)
               PSID(3,IWF,IPT)=PSID(3,IWF,IPT)
     &          +REP(JROW,IROW,IGRP,K_REP)*GSUB(3,JWF)
              END DO     !JROW
             END DO      !IROW
            END DO       !IOCC
           END DO        !K_REP
c         END DO
C
C END OF UPDATE:
C
  493    CONTINUE
  495   CONTINUE
C
C  UPDATE MATRIX ELEMENTS
C
         DO 3100 IPT=1,MPTS
C         IWF=NWFS(1)*(ISPN-1)
c         DO 390 JWF=1,NWFS(ISPN)
c          IWF=IWF+1
           DO 391 IX=1,3
            DERSIC(IX,LFN,IID)=DERSIC(IX,LFN,IID) + ISPFAC*
     &       PSID(IX,LFN,IPT)*SICP(IPT)*PSIG(IPT,1)*WMSA(IPT)
  391      CONTINUE
  390     CONTINUE
 3100    CONTINUE
   30   CONTINUE
  483  CONTINUE
  485 CONTINUE
c
c  Print tests as needed
c
c       print *, 'derslv LFN', LFN
c       print *, 'dersic'
c       do iid = 1,5
c        print 1000, (dersic(ix,LFN,iid),ix=1,3)
c       end do
c       print *, 'psid'
c       print 1000, (psid(1,LFN,ipt),ipt=1,5)

C
C CONSTRUCT TEST INTEGRALS:  <phi_i|phi_i>, and <phi_i|VSIC_i|phi_i>
c
c         DO IPT=1,MPTS
c          TESTSIC=TESTSIC + 
c    &     PSIG(IPT,1)*PSIG(IPT,1)*WMSA(IPT)*SICP(IPT)
c          OVER_test = over_test + psig(ipt,1)*psig(ipt,1)*wmsa(ipt)
c         END DO
c1000  FORMAT(' ',15F12.5)
c       call flush(6)
c
!YY Deallocate tmp2
c
       DEALLOCATE(PSIG,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR DEALLOCATING PSIG'
       DEALLOCATE(PSID,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR DEALLOCATING PSID'
       DEALLOCATE(PTS,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR DEALLOCATING NSPEED'
       DEALLOCATE(GRAD,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR DEALLOCATING GRAD'
       DEALLOCATE(GRAD1,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR DEALLOCATING GRAD1'
       DEALLOCATE(GSUB,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR DEALLOCATING GSUB'
       DEALLOCATE(RVECA,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR DEALLOCATING RVECA'
       DEALLOCATE(ICOUNT,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'SICDERSLV:ERROR DEALLOCATING ICOUNT'
       RETURN
       END
