C UTEP Electronic Structure Lab (2019)
C
C
       SUBROUTINE DECOMP(LNEWWF,INFIL,INFILN,OUTFIL)
C
C DECOMP BY MRP MAY 1996 / UPDATED BY DVP NOV 1996
C * ANGULAR DECOMPOSITION OF WAVEFUNCTIONS WITHIN A SPHERE
C
C ATTENTION: IF DECOMP IS CALLED WITH LNEWWF SET TO FALSE, NWF
C AND NWFS NEED TO BE DEFINED CORRECTLY
C
C ANGULAR DECOMPOSITION FOR WAVEFUNCTIONS       
C
C
       use debug1
       use dosjnt_mod,only : PSIG
       use common2,only : RIDT, N_CON, LSYMMAX, N_POS, NFNCT, ISPN, NSPN
       use common3,only : RMAT
       use common5,only : PSI, NWF, NWFS, EVLOCC
! Conversion to implicit none.  Raja Zope Thu Aug 17 14:34:40 MDT 2017

!      INCLUDE  'PARAMAS'  
       INCLUDE  'PARAMA2'  
       INTEGER :: LMXX, I, I_POS, IANG, ICON, IERR, IFAIL, IFNCT, ILOC,
     & IPOL, IPTS, IR, ISHDUMMY, ISHELLA, ISIZE, ISPHERE, ISWITCH, IWF,
     & IWFS, J, J_POS, JPTS, L, L1, L2, L_NUC, LI, LM, LMAX, LMX1,
     & LMX2, LPBEG, LPTS, LPV, LSIZ, LWRIT, M, M_NUC, MAXANG, MAXRAD,
     & MAXSPH, MPTS, MSITES, MTOT, MU, NANG, NMAX, NPOL, NPOW, NPV,
     & NRAD, NSPHERE
       REAL*8 :: SYMBOL , AFUDGE, AMAX, AMIN, DLE, DOT, DTS, EALP, ENG,
     & ENV, ERGMAX, ERGMIN, ERR, ERRMAX, FACTOR, FWHM, HA2EV, PI, QWRT,
     & RMAX, RMIN, RSQRDR, TIME1, TIME2, VFAC
       SAVE
       PARAMETER (NMAX=MPBLOCK)
       PARAMETER (LMXX=10)
       PARAMETER (LSIZ=(LMXX+1)**2)
       PARAMETER (MAXANG=((2*LMXX+1)*(LMXX+1)))
       PARAMETER (MAXSPH=500)
       PARAMETER (MAXRAD=1000)
C
C FOOL THE COMPILER FOR MXSPN=1 TO SUPRESS WARNING MESSAGES
C THAT ARE REALLY IRRELEVANT
C
       CHARACTER*7 INFIL,INFILN
       CHARACTER*4 OUTFIL
       INTEGER FSPN
       LOGICAL LMKFIL,LNEWWF
       LOGICAL IUPDAT,EXIST
       CHARACTER*20 FNAME
C       COMMON/TMP2/PSIG(NMAX,MAX_OCC)
C
C SCRATCH COMMON BLOCK FOR LOCAL ARRAYS
C
C       COMMON/TMP1/PTS(NSPEED,3),PSIL(MAX_OCC,LSIZ,2)
C     &  ,RANG(3,MAXANG),QL(LMXX+2),QTOT(LMXX+2),DOS(LMXX+2)
C     &  ,QLDS(LMXX+2,MAX_OCC),YLM(MAXANG,LSIZ)
C     &  ,EMN(MAXSPH),EMX(MAXSPH),XRAD(MAXRAD),WTRAD(MAXRAD)
C     &  ,CENTER(6,MAXSPH),ANGLE(3,MAXANG),DOMEGA(MAXANG)
C     &  ,RVECA(3,MX_GRP),GRAD(NSPEED,10,6,MAX_CON,3)
C     &  ,ICOUNT(MAX_CON,3)
       DIMENSION ISIZE(3),MSITES(1)
       REAL*8,ALLOCATABLE :: PTS(:,:),PSIL(:,:,:),RANG(:,:),QL(:),
     &          QTOT(:),DOS(:),QLDS(:,:),YLM(:,:),EMN(:),EMX(:),
     &          XRAD(:),WTRAD(:),CENTER(:,:),ANGLE(:,:),DOMEGA(:),
     &          RVECA(:,:),GRAD(:,:,:,:,:)
       LOGICAL,ALLOCATABLE :: ICOUNT(:,:)

       DATA ISIZE/1,3,6/
       DATA HA2EV/27.2116D0/
C
C ALLOCATE LOCAL ARRAYS
C
        ALLOCATE(PTS(NSPEED,3),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING PTS'
        ENDIF
        ALLOCATE(PSIL(MAX_OCC,LSIZ,2),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING PSIL'
        ENDIF
        ALLOCATE(RANG(3,MAXANG),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING RANG'
        ENDIF
        ALLOCATE(QL(LMXX+2),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING QL'
        ENDIF
        ALLOCATE(QTOT(LMXX+2),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING QTOT'
        ENDIF
        ALLOCATE(DOS(LMXX+2),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING DOS'
        ENDIF
        ALLOCATE(QLDS(LMXX+2,MAX_OCC),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING QLDS'
        ENDIF
        ALLOCATE(YLM(MAXANG,LSIZ),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING YLM'
        ENDIF
        ALLOCATE(EMN(MAXSPH),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING EMN'
        ENDIF
        ALLOCATE(EMX(MAXSPH),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING EMX'
        ENDIF
        ALLOCATE(XRAD(MAXRAD),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING XRAD'
        ENDIF
        ALLOCATE(WTRAD(MAXRAD),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING WTRAD'
        ENDIF
        ALLOCATE(CENTER(6,MAXSPH),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING CENTER'
        ENDIF
        ALLOCATE(ANGLE(3,MAXANG),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING ANGLE'
        ENDIF
        ALLOCATE(DOMEGA(MAXANG),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING DOMEGA'
        ENDIF
        ALLOCATE(RVECA(3,MX_GRP),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING RVECA'
        ENDIF
        ALLOCATE(GRAD(NSPEED,10,6,MAX_CON,3),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING GRAD'
        ENDIF
        ALLOCATE(ICOUNT(MAX_CON,3),STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM ALLOCATING ICOUNT'
        ENDIF
C
C ARRAY FROM XTMP2
C
        IF(ALLOCATED(PSIG)) THEN
          WRITE(6,*)'DECOMP:PSIG ALREADY ALLOCATED'
        ELSE
          ALLOCATE(PSIG(NMAX,MAX_OCC),STAT=IERR)
          IF(IERR/=0)WRITE(6,*)'DECOMP:ERROR ALLOCATING PSIG'
        ENDIF
C READ INPUT FILE
C CENTER CONTAINS THE COORDINATES (X,Y,Z), THE RADII R1,R2 AND THE
C MAXIMUM ALPHA FOR EACH CENTER
C
        ERGMIN=  1.0D-30
        ERGMAX= -1.0D-30
        OPEN(74,FILE=INFIL,FORM='FORMATTED',STATUS='OLD')
        REWIND(74)
        READ(74,*,END=10) ISWITCH
        READ(74,*,END=10) ERRMAX,AMIN,LMAX,NPOW
        READ(74,*,END=10) FWHM,QWRT
        READ(74,*,END=10) NSPHERE
        IF (NSPHERE.GT.MAXSPH) THEN
         PRINT *,'DECOMP: MAXSPH MUST BE AT LEAST: ',NSPHERE
         GOTO 20
        END IF
        DO I=1,NSPHERE
         READ(74,*,END=10)(CENTER(J,I),J=1,6),EMN(I),EMX(I)
         ERGMIN=MIN(ERGMIN,EMN(I))
         ERGMAX=MAX(ERGMAX,EMX(I))
        END DO
        GOTO 30
   10   PRINT *,'DECOMP: INPUT FILE IS INVALID'
   20   CLOSE(74) 
        GOTO 900
   30   CONTINUE
        CLOSE(74)
        OPEN(74,FILE=INFILN,FORM='FORMATTED',STATUS='UNKNOWN')
C
C IF DESIRED, CALL WFWIND
C NWF AND NWFS ARE DEFINED BY WFWIND
C
        FSPN=2/NSPN
        IF (LNEWWF) THEN
         FSPN=1
         ERGMIN=ERGMIN-4*FWHM
         ERGMAX=ERGMAX+4*FWHM
         CALL WFWIND(ERGMIN,ERGMAX,.TRUE.,.TRUE.,IFAIL)
         IF (IFAIL .EQ. 1) THEN
          PRINT *,'DECOMP: WFWIND FAILED, ABORTING LDOS CALCULATION'
          RETURN
         END IF
        END IF
C
C LMAX, LMX2 CHECK AND SETUP
C
        IF (LMAX.GT.10) THEN
         LMAX=10
         PRINT '(A)','DECOMP: WARNING: LMAX HAS BEEN REDUCED TO 10'
        END IF
        LMX2=2*LMAX
C
C SETUP ANGULAR POINTS AND SPHERICAL HARMONICS
C FIRST, CHECK IF ENOUGH SPACE IN YLM
C
        MPTS=0
        IF (DEBUG) PRINT *,'MAXANG IN DECOMP: ',MAXANG
        CALL HARMONICS(MAXANG,MPTS,LMAX,ANGLE,YLM,NPOL)
        IF (NPOL.GT.LSIZ) THEN
         PRINT *,'DECOMP: LSIZ MUST BE AT LEAST: ',NPOL
         CALL STOPIT
        END IF
C
C CALL ANGMSH TO GET ANGULAR POINTS. THEN, SEND THESE POINTS TO
C HARMONICS AND GET SPHERICAL HARMONICS
C
        CALL ANGMSH(MAXANG,LMX2,NANG,ANGLE,DOMEGA)
        IF (DEBUG) PRINT *,'DECOMP-ANGMSH: LMAX,NANG: ',LMX2,NANG
        CALL HARMONICS(MAXANG,NANG,LMAX,ANGLE,YLM,NPOL)
        IF (DEBUG) PRINT *,'DECOMP-HARMON: LMAX,NPOL: ',LMAX,NPOL
C
C CHECK ORTHONORMALITY OF YLM'S ...
C
        ERR=0.0D0
        DO L1=1,NPOL 
         DO L2=L1,NPOL 
          DOT=0.0D0
          DO IANG=1,NANG
           DOT=DOT+YLM(IANG,L1)*YLM(IANG,L2)*DOMEGA(IANG)
          END DO
          IF (L1.EQ.L2) THEN
           ERR=ERR+ABS(1.0D0-DOT)
          ELSE
           ERR=ERR+DOT
          END IF
         END DO
         IF (DEBUG) PRINT *,'ORTHOGONALITY TEST: ',L1,ERR
        END DO
        ERR=2*ERR/(NPOL*(NPOL+1))
        IF (DEBUG) PRINT *,'AVERAGE ORTHOGONALITY ERROR: ',ERR 
C
C LOOP FOR EACH SPHERE
C START BY SETTING UP RADIAL POINTS
C
        DO 850 ISPHERE=1,NSPHERE
         CALL GASITES(1,CENTER(1,ISPHERE),MTOT,RVECA,MSITES)
         RMIN=CENTER(4,ISPHERE)
         RMAX=CENTER(5,ISPHERE)
         AMAX=CENTER(6,ISPHERE)
         AFUDGE=1.2D0
         CALL RADMSH(MAXRAD,RMIN,RMAX,ERRMAX,AMIN,AMAX,AFUDGE,NPOW,
     &               NRAD,XRAD,WTRAD)
         PRINT '(A,I5,A,I5,A,F15.5)','SPHERE ',ISPHERE,
     &         ': ',NRAD*NANG,' POINTS, RADIUS= ',RMAX
C
C INITIALIZE PSIL(IWF,LM,2)
C RADIAL INTEGRALS ARE STORED IN PSIL(IWF,LM,2)
C
         DO LM=1,NPOL
          DO IWF=1,NWF 
           PSIL(IWF,LM,2)=0.0D0
          END DO
         END DO
C
C CALCULATE WAVEFUNCTIONS
C FOR EACH RADIAL POINT AND EVERY WAVEFUNCTION, 
C GET ANGULAR AVERAGE AND STORE IT IN PSIL(IWF,LM,1)
C START BY INITIALIZING PSIL AND SETTING UP THE POINTS
C
         DO 500 IR=1,NRAD
          DO LM=1,NPOL
           DO IWF=1,NWF
            PSIL(IWF,LM,1)=0.0D0
           END DO 
          END DO
          DO IANG=1,NANG
           RANG(1,IANG)=XRAD(IR)*ANGLE(1,IANG)+CENTER(1,ISPHERE)
           RANG(2,IANG)=XRAD(IR)*ANGLE(2,IANG)+CENTER(2,ISPHERE)
           RANG(3,IANG)=XRAD(IR)*ANGLE(3,IANG)+CENTER(3,ISPHERE)
          END DO
C
C POINTS LOOP
C
         LPTS=0
   40    CONTINUE
          MPTS=MIN(NMAX,NANG-LPTS)
          LPBEG=LPTS
C
C INITIALIZE PSIG 
C
          DO IWF=1,NWF
           DO IPTS=1,MPTS
            PSIG(IPTS,IWF)=0.0D0
           END DO  
          END DO  
          ISHELLA=0
C
C FOR ALL CENTER TYPES
C
          DO 86 IFNCT=1,NFNCT
           LMX1=LSYMMAX(IFNCT)+1
C
C FOR ALL POSITIONS OF THIS CENTER
C
           DO 84 I_POS=1,N_POS(IFNCT)
            ISHELLA=ISHELLA+1
C
C GET SYMMETRY INFO
C
            CALL OBINFO(1,RIDT(1,ISHELLA),RVECA,M_NUC,ISHDUMMY)
C
C FOR ALL EQUIVALENT POSITIONS OF THIS ATOM
C
            DO 82 J_POS=1,M_NUC
C
C UNSYMMETRIZE 
C
             CALL UNRAVEL(IFNCT,ISHELLA,J_POS,RIDT(1,ISHELLA),
     &                    RVECA,L_NUC,1)
             IF(L_NUC.NE.M_NUC)THEN
              PRINT *,'DECOMP: PROBLEM IN UNRAVEL'
              CALL STOPIT
             END IF
             LPTS=LPBEG
C
C FOR ALL MESHPOINTS IN BLOCK DO A SMALLER BLOCK
C
             DO 80 JPTS=1,MPTS,NSPEED
              NPV=MIN(NSPEED,MPTS-JPTS+1)
C
C CALCULATE DIFFERENCE VECTOR R-RVECA
C
              DO LPV=1,NPV
               PTS(LPV,1)=RANG(1,LPTS+LPV)-RVECA(1,J_POS)
               PTS(LPV,2)=RANG(2,LPTS+LPV)-RVECA(2,J_POS)
               PTS(LPV,3)=RANG(3,LPTS+LPV)-RVECA(3,J_POS)
              END DO
C
C GET ORBITS AND DERIVATIVES
C
              CALL GORBDRV(0,IUPDAT,ICOUNT,NPV,PTS,IFNCT,GRAD)
C
C UPDATING ARRAY PSIG
C
              IF (IUPDAT) THEN
               IPTS=JPTS-1
               ILOC=0
               DO 78 LI=1,LMX1
                DO MU=1,ISIZE(LI)
                 DO ICON=1,N_CON(LI,IFNCT)
                  ILOC=ILOC+1
                  IF (ICOUNT(ICON,LI)) THEN
                   DO IWF=1,NWF
                    FACTOR=PSI(ILOC,IWF,1)
                    DO LPV=1,NPV
                     PSIG(IPTS+LPV,IWF)=PSIG(IPTS+LPV,IWF)
     &               +FACTOR*GRAD(LPV,1,MU,ICON,LI)
                    END DO
                   END DO  
                  END IF
                 END DO  
                END DO  
   78          CONTINUE
              END IF
              LPTS=LPTS+NPV
   80        CONTINUE
   82       CONTINUE
   84      CONTINUE
   86     CONTINUE
C
C UPDATE PSIL
C
          DO LM=1,NPOL
           DO IWF=1,NWF
            DO IPTS=1,MPTS
             PSIL(IWF,LM,1)=PSIL(IWF,LM,1)+
     &       PSIG(IPTS,IWF)*DOMEGA(LPBEG+IPTS)*YLM(LPBEG+IPTS,LM)
            END DO
           END DO
          END DO
C
C CHECK IF ALL POINTS DONE
C
          LPTS=LPBEG+MPTS
          IF(LPTS.GT.NANG)THEN
           PRINT *,'DECOMP: ERROR: LPTS > NANG'
           CALL STOPIT
          ELSE
           IF(LPTS.LT.NANG) GOTO 40
          END IF
C
C UPDATE PROJECTIONS
C
          RSQRDR=FSPN*WTRAD(IR)
          DO LM=1,NPOL
           DO IWF=1,NWF
            PSIL(IWF,LM,2)=PSIL(IWF,LM,2)+RSQRDR*PSIL(IWF,LM,1)**2
           END DO
          END DO
  500    CONTINUE
C
C WRITE DATA TO INPUT FILE
C USE PSIL(IWF,LM,1) TO STORE L-DECOMPOSITION
C
         DO ISPN=1,NSPN
          WRITE(74,*)
          WRITE(74,1030) ISPHERE,MTOT,ISPN
 1030     FORMAT(' CENTER: ',I5,', NUMBER OF EQUIVALENT SITES: ',I5,
     &           ', SPIN: ',I2/1X,58('-'))
          WRITE(74,1040)
 1040     FORMAT(13X,'EVAL',4X,'TOTAL',4X,'L=0',5X,'L=1',5X,'L=2',5X,
     &          'L=3',5X,'L=4',5X,'L=5')
          DO L=1,LMAX+2
           QTOT(L)=0.0D0
          END DO
          DO IWFS=1,NWFS(ISPN)
           IWF=IWFS
           IF (ISPN.EQ.2) IWF=IWF+NWFS(1)
           QL(LMAX+2)=0.0D0
           IPOL=0
           DO L=1,LMAX+1
            QL(L)=0.0D0
            DO M=1,2*L-1
             IPOL=IPOL+1
             QL(L)=QL(L)+PSIL(IWF,IPOL,2)
            END DO
            QTOT(L)     =QTOT(L)     +QL(L)  
            QTOT(LMAX+2)=QTOT(LMAX+2)+QL(L)
            QL  (LMAX+2)=QL  (LMAX+2)+QL(L)
           END DO
           DO L=1,LMAX+2
            QLDS(L,IWF)=QL(L)
           END DO
           IF (QL(LMAX+2).GT.QWRT) THEN
            WRITE(74,1050) IWF,EVLOCC(IWF),QL(LMAX+2),
     &                     (QL(L),L=1,LMAX+1)
           END IF
 1050      FORMAT(1X,I5,1X,F11.4,20F8.3)
          END DO
          WRITE(74,1060) QTOT(LMAX+2),(QTOT(L),L=1,LMAX+1)
 1060     FORMAT(' TOTAL',12X,20F8.3)
         END DO
C
C CREATE DENSITY OF STATES FILE
C
         WRITE(FNAME,'(A,I3.3)') OUTFIL,ISPHERE
         OPEN(75,FILE=FNAME,FORM='FORMATTED',STATUS='UNKNOWN')
         REWIND(75)
         LWRIT=MIN(3,LMAX+1)
         PI=4*ATAN(1.0D0)
         EALP=4*LOG(2.0D0)/FWHM**2
         VFAC=SQRT(EALP/PI)/HA2EV
         DLE=0.1D0*FWHM
         ENG=EMN(ISPHERE)-DLE
 600     CONTINUE
          ENG=ENG+DLE
          DO L=1,LMAX+2
           DOS(L)=0.0D0
          END DO
          DTS=0.0D0
          DO IWF=1,NWF
           ENV=EXP(-EALP*(ENG-EVLOCC(IWF))**2)
           DTS=DTS+ENV
           DO L=1,LMAX+2
            DOS(L)=DOS(L)+ENV*QLDS(L,IWF)
           END DO
          END DO
          DO L=1,LMAX+2
           DOS(L)=VFAC*DOS(L)
          END DO
          IF (DTS.GT.QWRT) THEN
           WRITE(75,1070) ENG*HA2EV,DOS(LMAX+2),(DOS(L),L=1,LWRIT)
          END IF
 1070     FORMAT(1X,24F11.4)
          IF (ENG.LT.EMX(ISPHERE)) GO TO 600
         CONTINUE
C
C END OF ENERGY LOOP
C
         CLOSE(75)
  850   CONTINUE
        CLOSE(74)
  900   CONTINUE
C
C DEALLOCATE LOCAL ARRAYS
C
        DEALLOCATE(PTS,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING PTS'
        ENDIF
        DEALLOCATE(PSIL,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING PSIL'
        ENDIF
        DEALLOCATE(RANG,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING RANG'
        ENDIF
        DEALLOCATE(QL,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING QL'
        ENDIF
        DEALLOCATE(QTOT,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING QTOT'
        ENDIF
        DEALLOCATE(DOS,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING DOS'
        ENDIF
        DEALLOCATE(QLDS,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING QLDS'
        ENDIF
        DEALLOCATE(YLM,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING YLM'
        ENDIF
        DEALLOCATE(EMN,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING EMN'
        ENDIF
        DEALLOCATE(EMX,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING EMX'
        ENDIF
        DEALLOCATE(XRAD,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING XRAD'
        ENDIF
       DEALLOCATE(WTRAD,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING WTRAD'
        ENDIF
        DEALLOCATE(CENTER,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING CENTER'
        ENDIF
        DEALLOCATE(ANGLE,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING ANGLE'
        ENDIF
        DEALLOCATE(DOMEGA,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING DOMEGA'
        ENDIF
        DEALLOCATE(RVECA,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING RVECA'
        ENDIF
        DEALLOCATE(GRAD,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING GRAD'
        ENDIF
        DEALLOCATE(ICOUNT,STAT=IERR)
        IF(IERR.NE.0)THEN
          WRITE(6,*)'DECOMP:PROBLEM DEALLOCATING ICOUNT'
        ENDIF
C
C ARRAY FROM XTMP2
C
        DEALLOCATE(PSIG,STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'DECOMP:ERROR DEALLOCATING PSIG'

        CALL GTTIME(TIME2)
        CALL TIMOUT('WAVEFUNCTION DECOMPOSITION:        ',TIME2-TIME1)
        RETURN
       END
