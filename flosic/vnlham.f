C UTEP Electronic Structure Lab (2019)
C
C
C ***********************************************************
C
       SUBROUTINE VNLHAM(MODE)
C
C CALCULATE NONLOCAL PSP CONTRIBUTIONS TO HAMILTONIAN
C
       use hstor1,only : hstor
       use common1,only : PSRZONE, LMXPSRZ, PSPSYM, RPSNLO, WPSNLO,
     &   VPSNLO, LMAXNLO, NRPSP
       use common2,only : RIDT, IFUIDT, NIDENT
       use common8,only : REP, N_REP, NDMREP
! Conversion to implicit none.  Raja Zope Thu Aug 17 14:35:06 MDT 2017

!      INCLUDE  'PARAMAS'  
       INCLUDE  'PARAMA2'  
       INTEGER :: MODE, I, IANG, IBG, IDIM, IERR, IFUPSP, IIDPSP, INDX,
     & INDXSAV, INUC, IPTS, IRAD, IREP, ISS, IYLM, IZONE, JSS, L,
     & LMDIM, LMDMAX, LPSPMX, M, MNUC, MPTS, MXBASPR, MXYLM, NBAS,
     & NDIMR
       REAL*8 :: SYMBOL , RRAD, TIME1, TIME2, TIME3, TIMEGTB, WTRAD
        SAVE
        PARAMETER(MXYLM=(MXLPSP+1)**2)
        PARAMETER(MXBASPR=5*NDH)
        LOGICAL LSETUP
C        COMMON/TMP2/ANGLE(3,MPBLOCK,5),DOMEGA(MPBLOCK)
C     &   ,YLMP(MPBLOCK,MXYLM,5),RNUC(3,MX_GRP),VNLSAV(MXYLM)
C     &   ,PTS(3,MPBLOCK),PHIPTS(MPBLOCK,MXBASPR),PHIRYLM(MXBASPR,MXYLM)
C     &   ,NANG(5),NYLM(5),MSITES(1)
        REAL*8,ALLOCATABLE :: ANGLE(:,:,:),DOMEGA(:),YLMP(:,:,:)
     &   ,RNUC(:,:),VNLSAV(:),PTS(:,:),PHIPTS(:,:),PHIRYLM(:,:)
        INTEGER :: NANG(5),NYLM(5),MSITES(1)
C
C ALLOCATE LOCAL ARRAYS
C
        ALLOCATE(ANGLE(3,MPBLOCK,5),STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR ALLOCATING ANGLE'
        ALLOCATE(DOMEGA(MPBLOCK),STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR ALLOCATING DOMEGA'
        ALLOCATE(YLMP(MPBLOCK,MXYLM,5),STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR ALLOCATING YLMP'
        ALLOCATE(RNUC(3,MX_GRP),STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR ALLOCATING RNUC'
        ALLOCATE(VNLSAV(MXYLM),STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR ALLOCATING VNLSAV'
        ALLOCATE(PTS(3,MPBLOCK),STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR ALLOCATING PTS'
        ALLOCATE(PHIPTS(MPBLOCK,MXBASPR),STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR ALLOCATING PHIPTS'
        ALLOCATE(PHIRYLM(MXBASPR,MXYLM),STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR ALLOCATING PHIRYLM'
C
C DEFINE LPSPMX (MAXIMUM L FOR PSEUDO-POTENTIAL)
C
        PRINT '(A)','SETTING UP NONLOCAL HAMILTONIAN'
        LPSPMX=0
        DO IIDPSP=1,NIDENT
         IFUPSP=IFUIDT(IIDPSP)
         IF (PSPSYM(IFUPSP)(1:3) .NE. 'ALL') THEN
          LPSPMX=MAX(LPSPMX,LMAXNLO(IFUPSP))
         END IF
        END DO
C
C DEFINE YLMP: CONTAINS (SPHERICAL HARMONICS)*(ANGULAR WEIGHT)
C
        MPTS=0
         print *, MPBLOCK, MPTS
        CALL HARMONICS(MPBLOCK,MPTS,LPSPMX,ANGLE(1,1,1),
     &                 YLMP(1,1,1),LMDMAX)
        IF (LMDMAX .GT. MXYLM) THEN
         PRINT *,'VNLHAM: MXYLM MUST BE AT LEAST: ',LMDMAX
         CALL STOPIT
        END IF
        DO IZONE=1,5
         CALL ANGMSH(MPBLOCK,LMXPSRZ(IZONE),NANG(IZONE),
     &               ANGLE(1,1,IZONE),DOMEGA)
         CALL HARMONICS(MPBLOCK,NANG(IZONE),LPSPMX,ANGLE(1,1,IZONE),
     &                  YLMP(1,1,IZONE),NYLM(IZONE))
         DO IYLM=1,NYLM(IZONE)
          DO IANG=1,NANG(IZONE)
           YLMP(IANG,IYLM,IZONE)= YLMP(IANG,IYLM,IZONE)*DOMEGA(IANG)
          END DO
         END DO
        END DO
C
C INITIALIZE ARRAY INDEX IN GETBAS
C
        LSETUP=.TRUE.
        CALL GTTIME(TIME1)
        CALL GETBAS(LSETUP,0,0,ANGLE(1,1,1),PHIPTS,0,NBAS)
        CALL GTTIME(TIME2)
        TIMEGTB= TIME2-TIME1
C
C HERE STARTS THE BIG LOOP
C SET UP RADIUS, TYPE OF ANGULAR MESH, AND NONLOCAL POTENTIAL
C
        DO 600 IIDPSP=1,NIDENT  
         IFUPSP=IFUIDT(IIDPSP)
         IF (PSPSYM(IFUPSP)(1:3) .EQ. 'ALL') GOTO 600
         CALL GASITES(1,RIDT(1,IIDPSP),MNUC,RNUC,MSITES)
         DO 590 INUC=1,MNUC
          DO 580 IRAD=1,NRPSP(IFUPSP)
           RRAD= RPSNLO(IRAD,IFUPSP)
           IZONE=5
           DO I= 4, 1, -1
            IF (RRAD .LT. PSRZONE(I)) THEN
             IZONE=I
            ELSE
             GOTO 50
            END IF
           END DO
   50      CONTINUE
C
C SAVE NONLOCAL POTENTIAL FOR LATER
C
           LMDIM=(LMAXNLO(IFUPSP)+1)**2
           DO L=0,LMAXNLO(IFUPSP)
            IBG=L*L
            DO M=1,2*L+1
             VNLSAV(IBG+M)= VPSNLO(L+1,IRAD,IFUPSP)
            END DO
           END DO
C
C LOOP OVER ALL REPRESENTATIONS
C
           INDX=0
           DO 200 IREP=1,N_REP
            NDIMR=NDMREP(IREP)
            DO IYLM=1,LMDIM
             DO I=1,MXBASPR
              PHIRYLM(I,IYLM)= 0.0D0
             END DO
            END DO
C
C LOOP OVER ALL ANGULAR POINTS 
C
            MPTS=NANG(IZONE)
            DO IPTS=1,MPTS
             PTS(1,IPTS)=RNUC(1,INUC)+RRAD*ANGLE(1,IPTS,IZONE) 
             PTS(2,IPTS)=RNUC(2,INUC)+RRAD*ANGLE(2,IPTS,IZONE) 
             PTS(3,IPTS)=RNUC(3,INUC)+RRAD*ANGLE(3,IPTS,IZONE) 
            END DO
            LSETUP= .FALSE.
            CALL GTTIME(TIME2)
            CALL GETBAS(LSETUP,MPTS,1,PTS,PHIPTS,IREP,NBAS)
            CALL GTTIME(TIME3)
            TIMEGTB= TIMEGTB+TIME3-TIME2
             IF (NBAS*NDIMR .GT. MXBASPR) THEN
             PRINT *,'VNLHAM: ARRAY DIMENSION MXBASPR EXCEEDED'
             PRINT *,'        IREP, NBAS, NDIMR, MXBASPR: ',
     &                        IREP, NBAS, NDIMR, MXBASPR
             CALL STOPIT
            END IF
C
C UPDATE PHIRYLM (CONTAINS ANGULAR PROJECTION OF SALCS)
C
            DO IDIM=1,NDIMR
             IBG= (IDIM-1)*NBAS
             DO ISS=1,NBAS
              DO IYLM=1,LMDIM
               DO IPTS=1,MPTS
                PHIRYLM(IBG+ISS,IYLM)= PHIRYLM(IBG+ISS,IYLM)
     &          +PHIPTS(IPTS,IBG+ISS)*YLMP(IPTS,IYLM,IZONE)
               END DO
              END DO
             END DO
            END DO
C
C UPDATE HSTOR MATRIX ELEMENTS
C
            INDXSAV=INDX
            WTRAD=WPSNLO(IRAD,IFUPSP)/NDIMR
            DO IDIM=1,NDIMR
             IBG= (IDIM-1)*NBAS
             INDX=INDXSAV
             DO ISS=1,NBAS
              DO JSS=ISS,NBAS
               INDX=INDX+1
               DO IYLM=1,LMDIM
                HSTOR(INDX,MODE)=HSTOR(INDX,MODE)+PHIRYLM(IBG+ISS,IYLM)
     &          *PHIRYLM(IBG+JSS,IYLM)*WTRAD*VNLSAV(IYLM)
               END DO
              END DO
             END DO
            END DO
  200      CONTINUE
  580     CONTINUE
  590    CONTINUE
  600   CONTINUE
C
C DEALLOCATE LOCAL ARRAYS
C
        DEALLOCATE(ANGLE,STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR DEALLOCATING ANGLE'
        DEALLOCATE(DOMEGA,STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR DEALLOCATING DOMEGA'
        DEALLOCATE(YLMP,STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR DEALLOCATING YLMP'
        DEALLOCATE(RNUC,STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR DEALLOCATING RNUC'
        DEALLOCATE(VNLSAV,STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR DEALLOCATING VNLSAV'
        DEALLOCATE(PTS,STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR DEALLOCATING PTS'
        DEALLOCATE(PHIPTS,STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR DEALLOCATING PHIPTS'
        DEALLOCATE(PHIRYLM,STAT=IERR)
        IF(IERR/=0)WRITE(6,*)'VNLHAM:ERROR DEALLOCATING PHIRYLM'
C
C GET TIME, PRINT STATS AND EXIT
C
        CALL GTTIME(TIME2)
        CALL TIMOUT('GETBAS EXECUTION:                  ',TIMEGTB) 
        CALL TIMOUT('SETUP OF NONLOCAL HAMILTONIAN:     ',TIME2-TIME1)
        RETURN
       END
